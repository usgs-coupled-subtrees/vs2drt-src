name: setup-fortran

on:
  push:
    branches:
      - master
      - setup-fortran

env:
  NAME: PhreeqcRM

jobs:
  test:
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-22.04, macos-12, windows-2019, windows-2022]
        toolchain:
          # - {compiler: gcc, version: 9}
          # - {compiler: gcc, version: 13}
          - {compiler: intel, version: '2022.1'}
          - {compiler: intel, version: '2022.2'}
          - {compiler: intel, version: '2023.0'}
          - {compiler: intel, version: '2023.1'}
          - {compiler: intel, version: '2023.2'}
          - {compiler: intel-classic, version: '2021.6'}
          - {compiler: intel-classic, version: '2021.7'}
          - {compiler: intel-classic, version: '2021.8'}
          - {compiler: intel-classic, version: '2021.9'}
          - {compiler: intel-classic, version: '2021.10'}
        build_shared_libs: [ON]
        build_type: [Release]        
        phreeqcrm_fortran_testing: [OFF]
        phreeqcrm_with_yaml_cpp: [OFF]
        # include:
        #   - os: macos-12
        #     toolchain: {compiler: gcc, version: 10}
        exclude:
          - os: macos-12
            toolchain: {compiler: intel}
          - os: macos-12
            toolchain: {compiler: gcc, version: 9}
          - os: windows-2019
            toolchain: {compiler: gcc}
          - os: windows-2022
            toolchain: {compiler: gcc}
          - os: windows-2022
            toolchain: {compiler: intel, version: '2022.1'}
          - os: windows-2022
            toolchain: {compiler: intel-classic, version: '2021.6'}
          - os: windows-2022
            toolchain: {compiler: intel-classic, version: '2021.7'}

    steps:
      - uses: fortran-lang/setup-fortran@v1.3
        id: setup-fortran
        with:
          compiler: ${{ matrix.toolchain.compiler }}
          version: ${{ matrix.toolchain.version }}

      - run: ${{ env.FC }} /QV
        if: ${{ contains(matrix.toolchain.compiler, 'intel') && runner.os == 'Windows' }}
        env:
          FC: ${{ steps.setup-fortran.outputs.fc }}

      - run: ${{ env.FC }} --version
        if: ${{ !(contains(matrix.toolchain.compiler, 'intel') && runner.os == 'Windows') }}
        env:
          FC: ${{ steps.setup-fortran.outputs.fc }}

      - run: sudo apt-get -y update && sudo apt-get install -y ninja-build
        if: ${{ runner.os == 'Linux' }}

      - run: brew install ninja
        if: ${{ runner.os == 'macOS' }}

      - uses: actions/checkout@v3

      - run: cmake -B setup-fortran/build -S setup-fortran -G Ninja -DCMAKE_BUILD_TYPE:STRING=Release

      - run: cmake --build setup-fortran/build

      - run: ctest --output-on-failure --test-dir setup-fortran/build

      - run: cmake -B setup-fortran/openmp/build -S setup-fortran/openmp -G Ninja -DCMAKE_BUILD_TYPE:STRING=Release

      - run: cmake --build setup-fortran/openmp/build

      - run: ctest --output-on-failure --test-dir setup-fortran/openmp/build

      #############################################################################################################

      # Note: This allows ${{ env.VCPKG_INSTALLATION_ROOT }} to be used in the remaining steps
      # Although its already set in the environment it can't be accessed using the env context
      # until it is stored in the $GITHUB_ENV file
      - run: echo "VCPKG_INSTALLATION_ROOT=$VCPKG_INSTALLATION_ROOT" >> $GITHUB_ENV
        shell: bash

      - run: vcpkg install yaml-cpp:x64-linux
        if: ${{ runner.os == 'Linux' && matrix.phreeqcrm_with_yaml_cpp == 'ON' }}
  
      - run: vcpkg install yaml-cpp:x64-osx
        if: ${{ runner.os == 'macOS' && matrix.phreeqcrm_with_yaml_cpp == 'ON' }}
  
      - run: vcpkg install yaml-cpp:x64-windows
        if: ${{ runner.os == 'Windows' && matrix.phreeqcrm_with_yaml_cpp == 'ON' }}
  
      - uses: egor-tensin/vs-shell@v2
        if: runner.os == 'Windows'
        with:
          arch: x64

      - run: >
          cmake -G Ninja
          -B ${{ github.workspace }}/build
          -DBUILD_SHARED_LIBS:BOOL=${{ matrix.build_shared_libs }}
          -DCMAKE_BUILD_TYPE=${{ matrix.build_type }}
          -DPHREEQCRM_FORTRAN_TESTING:BOOL=${{ matrix.phreeqcrm_fortran_testing }}
          -DPHREEQCRM_WITH_YAML_CPP=${{ matrix.phreeqcrm_with_yaml_cpp }}
          -S ${{ github.workspace }}
          --toolchain ${{ env.VCPKG_INSTALLATION_ROOT }}/scripts/buildsystems/vcpkg.cmake
          -L
        if: ${{ matrix.phreeqcrm_with_yaml_cpp == 'ON' }}

      - run: >
          cmake -G Ninja
          -B ${{ github.workspace }}/build
          -DBUILD_SHARED_LIBS:BOOL=${{ matrix.build_shared_libs }}
          -DCMAKE_BUILD_TYPE=${{ matrix.build_type }}
          -DPHREEQCRM_FORTRAN_TESTING:BOOL=${{ matrix.phreeqcrm_fortran_testing }}
          -DPHREEQCRM_WITH_YAML_CPP=${{ matrix.phreeqcrm_with_yaml_cpp }}
          -S ${{ github.workspace }}
          -L
        if: ${{ matrix.phreeqcrm_with_yaml_cpp != 'ON' }}


      - run: cmake --build build

      - run: ctest --output-on-failure --test-dir build

      - run: cat build/phreeqcrm.pc

      #############################################################################################################

  mpi:
    if: ${{ false }}
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-22.04, macos-12, windows-2019, windows-2022]
        toolchain:
          - {compiler: gcc, version: 9}
          - {compiler: gcc, version: 13}
          # - {compiler: intel, version: '2023.2'}
          - {compiler: intel-classic, version: '2021.10'}
        build_shared_libs: [ON]
        build_type: [Release]
        mpi: ['mpich', 'ompi', 'impi', 'msmpi']  # see https://github.com/mpi4py/setup-mpi/blob/master/setup-mpi.sh
        phreeqcrm_build_mpi: [ON]
        phreeqcrm_fortran_testing: [OFF]
        phreeqcrm_with_yaml_cpp: [OFF]
        include:
          - os: macos-12
            toolchain: {compiler: gcc, version: 10}
        exclude:
          - os: macos-12
            toolchain: {compiler: intel}
          - os: macos-12
            toolchain: {compiler: gcc, version: 9}
          - os: windows-2019
            toolchain: {compiler: gcc}
          - os: windows-2022
            toolchain: {compiler: gcc}
          # mpi
          - os: macos-12
            mpi: 'impi'
          - os: macos-12
            mpi: 'msmpi'
          - os: ubuntu-22.04
            mpi: 'msmpi'
          - os: windows-2019
            mpi: 'mpich'            
          - os: windows-2019
            mpi: 'ompi'
          - os: windows-2022
            mpi: 'mpich'            
          - os: windows-2022
            mpi: 'ompi'

    steps:
      - uses: fortran-lang/setup-fortran@v1.3
        id: setup-fortran
        with:
          compiler: ${{ matrix.toolchain.compiler }}
          version: ${{ matrix.toolchain.version }}

      - name: Setup mpi
        uses: mpi4py/setup-mpi@v1
        with:
          mpi: ${{ matrix.mpi }}

      - name: Show mpi compilers
        run: |
          mpicc -show
          mpicxx -show
          mpif90 -show
        if: ${{ matrix.mpi != 'msmpi' }}  

      - name: Override CC/CXX compilers
        run: |
          echo "CC=gcc" >> $GITHUB_ENV
          echo "CXX=g++" >> $GITHUB_ENV        
        if: ${{ runner.os == 'Linux' }}

      - run: sudo apt-get -y update && sudo apt-get install -y ninja-build
        if: ${{ runner.os == 'Linux' }}

      - run: brew install ninja
        if: ${{ runner.os == 'macOS' }}  

      - uses: actions/checkout@v3

      # Note: This allows ${{ env.VCPKG_INSTALLATION_ROOT }} to be used in the remaining steps
      # Although its already set in the environment it can't be accessed using the env context
      # until it is stored in the $GITHUB_ENV file
      - run: echo "VCPKG_INSTALLATION_ROOT=$VCPKG_INSTALLATION_ROOT" >> $GITHUB_ENV
        shell: bash

      - run: vcpkg install yaml-cpp:x64-linux
        if: ${{ runner.os == 'Linux' && matrix.phreeqcrm_with_yaml_cpp == 'ON' }}
  
      - run: vcpkg install yaml-cpp:x64-osx
        if: ${{ runner.os == 'macOS' && matrix.phreeqcrm_with_yaml_cpp == 'ON' }}
  
      - run: vcpkg install yaml-cpp:x64-windows
        if: ${{ runner.os == 'Windows' && matrix.phreeqcrm_with_yaml_cpp == 'ON' }}
  
      - uses: egor-tensin/vs-shell@v2
        if: runner.os == 'Windows'
        with:
          arch: x64

      - run: >
          cmake -G Ninja
          -B ${{ github.workspace }}/build-mpi
          -DBUILD_SHARED_LIBS:BOOL=${{ matrix.build_shared_libs }}
          -DCMAKE_BUILD_TYPE=${{ matrix.build_type }}
          -DPHREEQCRM_BUILD_MPI:BOOL=${{ matrix.phreeqcrm_build_mpi }}
          -DPHREEQCRM_FORTRAN_TESTING:BOOL=${{ matrix.phreeqcrm_fortran_testing }}
          -DPHREEQCRM_WITH_YAML_CPP=${{ matrix.phreeqcrm_with_yaml_cpp }}
          -S ${{ github.workspace }}
          --toolchain ${{ env.VCPKG_INSTALLATION_ROOT }}/scripts/buildsystems/vcpkg.cmake
          -L
        if: ${{ matrix.phreeqcrm_with_yaml_cpp == 'ON' }}

      - run: >
          cmake -G Ninja
          -B ${{ github.workspace }}/build-mpi
          -DBUILD_SHARED_LIBS:BOOL=${{ matrix.build_shared_libs }}
          -DCMAKE_BUILD_TYPE=${{ matrix.build_type }}
          -DPHREEQCRM_BUILD_MPI:BOOL=${{ matrix.phreeqcrm_build_mpi }}
          -DPHREEQCRM_FORTRAN_TESTING:BOOL=${{ matrix.phreeqcrm_fortran_testing }}
          -DPHREEQCRM_WITH_YAML_CPP=${{ matrix.phreeqcrm_with_yaml_cpp }}
          -S ${{ github.workspace }}
          -L
        if: ${{ matrix.phreeqcrm_with_yaml_cpp != 'ON' }}


      - run: cmake --build ${{ github.workspace }}/build-mpi

      - run: ctest --output-on-failure --test-dir ${{ github.workspace }}/build-mpi

      - run: cat ${{ github.workspace }}/build-mpi/phreeqcrm.pc
